---
- name: Configure access and secret key in keystore
  environment:
    OPENSEARCH_PATH_CONF: "{{ os_conf_dir }}"
  block:
  - name: Check keystore
    command: "{{ os_keystore_bin_path }} list sss"
    register: keystore
    changed_when: false
    failed_when: keystore.rc not in [0, 65]
  - name: Create keystore
    command: "{{ os_keystore_bin_path }} create"
    when: keystore.rc == 65
  - name: Add access key # noqa no-handler
    command: "{{ os_keystore_bin_path }} add s3.client.{{ snapshot_repo_name }}.access_key --stdin"
    args:
      stdin: "{{ snapshot_key }}"
    when: "'s3.client.' + snapshot_repo_name + '.access_key' not in keystore.stdout"
    notify: Reload secure settings
  - name: Add secret key # noqa no-handler
    command: "{{ os_keystore_bin_path }} add s3.client.{{ snapshot_repo_name }}.secret_key --stdin"
    args:
      stdin: "{{ snapshot_secret }}"
    when: "'s3.client.' + snapshot_repo_name + '.secret_key' not in keystore.stdout"
    notify: Reload secure settings
- name: Flush handlers
  meta: flush_handlers
- name: Check snapshot repository
  uri:
    url: "http://127.0.0.1:9200/_snapshot/{{ snapshot_repo_name }}"
    method: GET
    status_code: 200, 404
    body_format: json
  run_once: true
  changed_when: false
  register: snapshot_get
- name: Create snapshot repository # noqa no-handler
  uri:
    url: "http://127.0.0.1:9200/_snapshot/{{ snapshot_repo_name }}"
    method: PUT
    body_format: json
    body:
      type: "s3"
      settings: "{{ snapshot_repo_settings }}"
  run_once: true
  when: snapshot_get.status == 404 or snapshot_get.json.get(snapshot_repo_name) != snapshot_repo_settings
- name: Verify snapshot repository
  uri:
    url: "http://127.0.0.1:9200/_snapshot/{{ snapshot_repo_name }}/_verify"
    method: POST
  run_once: true

port {{ redis_port }}
dir /var/lib/{{ redis_dir }}
appendonly no
protected-mode no
maxmemory {{ redis_maxmem }}

pidfile /var/run/{{ redis_dir }}/redis_{{ redis_port }}.pid
logfile /var/log/{{ redis_dir }}/redis_{{ redis_port }}.log
loglevel notice

{% if redis_pass %}
requirepass {{ redis_pass }}
masterauth {{ redis_pass }}
{% endif %}

bind {{ ansible_all_ipv4_addresses | ipaddr('private') | first }} 127.0.0.1

# Decay LFU counters every 10 minutes
lfu-decay-time 9

# Earlier saturation of LFU counter.
lfu-log-factor 0

maxmemory-policy allkeys-lfu
oom-score-adj yes

{% if redis_cluster %}
cluster-enabled yes
cluster-node-timeout 5000
cluster-config-file /etc/redis_cluster/redis_{{ redis_port }}/nodes_{{ redis_port }}.conf

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least a hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
#
cluster-require-full-coverage no
{% endif %}

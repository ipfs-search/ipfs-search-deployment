---
- name: download go-ipfs binary
  get_url: url={{ binary_url }} checksum=sha512:{{ binary_sha512 }} dest=/tmp/go-ipfs.tar.gz
  register: binary
- block:
    - name: extract go-ipfs archive
      unarchive: copy=no src=/tmp/go-ipfs.tar.gz dest=/tmp/
    - name: install go-ipfs
      copy: remote_src=True src=/tmp/go-ipfs/ipfs dest="{{ ipfs_binary }}" mode=755
      notify: restart ipfs
    - name: remove temporary files
      file: state=absent path=/tmp/go-ipfs
  when: binary.changed
- group: name=ipfs system=true state=present
- user: name=ipfs comment="IPFS daemon" group=ipfs system=true state=present home="{{ ipfs_path }}" shell=/usr/sbin/nologin
- file: path="{{ ipfs_path }}" owner=ipfs group=ipfs mode=750 state=directory
- name: initialize IPFS repository
  command: "{{ ipfs_binary }} init"
  args:
    creates: "{{ ipfs_path }}/version"
  environment:
    IPFS_PATH: "{{ ipfs_path }}"
  become: true
  become_user: ipfs
# TODO: SECURITY: This requires that we trust ipify to provide the correct public IP. We could run our own ipify server.
- name: Get my public IP from ipify.org
  ipify_facts:
- template: src=ipfs_config.json dest=/var/lib/ipfs/config
  notify: restart ipfs
- name: Configure IPFS service
  template: src=ipfs.service dest=/etc/systemd/system/ipfs.service
  notify: restart ipfs
- name: Enable IPFS service
  systemd: name=ipfs daemon_reload=yes state=started enabled=yes
- name: Enable IPFS garbage collection
  cron: name="ipfs collect garbage" cron_file=/etc/crontab minute="*/9" hour="*" backup="yes" user=ipfs job="env IPFS_PATH=/var/lib/ipfs ipfs repo gc > /dev/null"

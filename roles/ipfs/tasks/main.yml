---
- name: build requirements
  apt:
    pkg:
      - build-essential
      - libssl-dev
      - pkg-config
    state: present
- name: clone go-ipfs
  git:
    dest: "{{ ipfs_build }}"
    repo: https://github.com/ipfs/go-ipfs.git
    version: "{{ ipfs_version }}"
  register: source
- block:
  - block:
    - name: clean go-ipfs
      make:
        chdir: "{{ ipfs_build }}"
        target: clean
    - name: make go-ipfs
      make:
        chdir: "{{ ipfs_build }}"
        params:
          GOTAGS=openssl
        target: build
    environment:
      PATH: "{{ golang_install_dir }}/bin:{{ ansible_env.PATH }}"
    become: false
  - name: Install ipfs binary
    copy:
      src: "{{ ipfs_build }}/cmd/ipfs/ipfs"
      dest: "{{ ipfs_binary }}"
      remote_src: True
      mode: 755
    become: true
    notify: restart ipfs
  - include_role:
      name: annotate
    vars:
      role: ipfs
      version: "{{ source.after }}"
      action: upgrade
  when: source.changed
- group: name=ipfs system=true state=present
- user: name=ipfs comment="IPFS daemon" group=ipfs system=true state=present home="{{ ipfs_path }}" shell=/usr/sbin/nologin
- file: path="{{ ipfs_path }}" owner=ipfs group=ipfs mode=750 state=directory
- name: initialize IPFS repository
  command: "{{ ipfs_binary }} init"
  args:
    creates: "{{ ipfs_path }}/version"
  environment:
    IPFS_PATH: "{{ ipfs_path }}"
  become: true
  become_user: "{{ ipfs_user }}"
# TODO: SECURITY: This requires that we trust ipify to provide the correct public IP. We could run our own ipify server.
- name: Get my public IP from ipify.org
  ipify_facts:
- name: Loading secrets
  include_vars:
    file: ../../vault/secrets.yml
- name: Ensure sniffer started
  systemd: name=ipfs-sniffer state=started
- name: Get sniffer head for peering
  uri:
    url: http://127.0.0.1:7779/heads
    return_content: true
  register: sniffer_heads
- name: Increase UDP Receive Buffer Size for quic-go v0.19.x+
  sysctl:
    name: net.core.rmem_max
    value: 2500000
    state: present
  notify: restart ipfs
- name: Configure IPFS service
  template: src=ipfs.service dest=/etc/systemd/system/ipfs.service
  notify: restart ipfs
- name: IPFS configuration file
  template: src=ipfs_config.json dest=/var/lib/ipfs/config
  vars:
    sniffer_head: "{{ sniffer_heads['content'].splitlines()[0] }}"
  notify: restart ipfs
- name: Enable IPFS service
  systemd: name=ipfs daemon_reload=yes state=started enabled=yes
- name: Enable IPFS garbage collection
  cron:
    name: "ipfs collect garbage"
    cron_file: /etc/crontab
    minute: "*/9"
    hour: "*"
    backup: "yes"
    user: "{{ ipfs_user }}"
    job: "env IPFS_PATH={{ ipfs_path }} ipfs repo gc > /dev/null"

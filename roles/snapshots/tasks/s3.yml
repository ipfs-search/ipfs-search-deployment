---
- name: Check keystore
  command: /usr/share/elasticsearch/bin/elasticsearch-keystore list
  register: keystore
  failed_when: keystore.rc not in [0, 65]
- name: Create keystore
  command: /usr/share/elasticsearch/bin/elasticsearch-keystore create
  when: keystore.rc == 65
- name: Add access key
  command: "/usr/share/elasticsearch/bin/elasticsearch-keystore add s3.client.{{ snapshot_name }}.access_key --stdin"
  args:
    stdin: "{{ snapshot_key }}"
  when: "'s3.client.'+snapshot_name+'.access_key' not in keystore.stdout"
  register: added_access_key
- name: Add secret key
  command: "/usr/share/elasticsearch/bin/elasticsearch-keystore add s3.client.{{ snapshot_name }}.secret_key --stdin"
  args:
    stdin: "{{ snapshot_secret }}"
  when: "'s3.client.'+snapshot_name+'.secret_key' not in keystore.stdout"
  register: added_secret_key
- name: Reload secure settings
  uri:
    url: "http://127.0.0.1:9200/_nodes/reload_secure_settings"
    method: POST
  when: added_access_key.changed or added_secret_key.changed
  run_once: true
- name: Create snapshot repository
  uri:
    url: "http://127.0.0.1:9200/_snapshot/{{ snapshot_name }}"
    method: PUT
    body_format: json
    body: |
      {
        "type": "s3",
        "settings": {
          "bucket": "{{ snapshot_bucket }}",
          "client": "{{ snapshot_name }}",
          "endpoint": "{{ snapshot_endpoint }}",
          "region": "{{ snapshot_region }}",
          "compress": true,
          "read_timeout": "2m",
          "max_retries": 5,
          "max_snapshot_bytes_per_sec": "10mb"
        }
      }
  run_once: true
- name: "Install {{ snapshot_name }} snapshot script"
  template:
    src: ipfs-search-snapshot.sh
    dest: "/usr/local/bin/ipfs-search-snapshot-{{ snapshot_name }}.sh"
    mode: 0755

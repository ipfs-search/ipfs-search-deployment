---
#Setup Grafana
- name: Update apt repo and cache on all Ubuntu box
  apt:
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name: "{{ install_packages }}"
    state: present
  become: yes
  tags:
    - install_packages

- name: Add the Grafana GPG key and APT repository
  shell: |
    curl https://packages.grafana.com/gpg.key | sudo apt-key add -
    add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
  args:
    warn: no
  become: yes

- name: Install the grafana package
  apt:
    name: grafana
    state: present
    update_cache: yes
  become: yes
  tags:
    - installed_grafana

- name: Systemd setup
  systemd:
    name: grafana-server
    enabled: yes
    state: started

- name: Sleep for 10 sec and continue with setup
  wait_for:
    timeout: 10

- name: Change default password for grafana admin
  command: grafana-cli admin reset-admin-password {{ grafana_password }}

- name: print vaulted grafana password
  vars:
    msg: |
         Grafana vaulted password is:
         >> {{ grafana_password }} <<
  debug:
    msg: "{{ msg.split('\n') }}"

- name: make grafana listening on DMZ
  lineinfile:
    path: /etc/grafana/grafana.ini
    regexp: '^(.*)http_addr =(.*)$'
    line: 'http_addr = {{ monitoring_host_internal_addr }}'
    # we don't need subnet mask here
    backrefs: yes
    # line: 'http_addr = {{ ansible_eno1.4000.ipv4.address }}'
    # ^
    # |
    # gotta add address as ansible variable, discovered based on interface
    # UPD: only one address is allowed
    # UPD2: hosts have different interface naming, so it's bad idea to get it stricted to eno1 interface,
    # should filter by 4000 vlanID or filter if it's in vlan CIDR
    # let's hope that var 'vlan_ip' exists for every host in hosts_var

- name: Systemd service restart
  systemd:
    name: grafana-server
    enabled: yes
    state: restarted

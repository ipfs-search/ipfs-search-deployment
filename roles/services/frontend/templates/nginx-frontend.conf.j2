proxy_cache_path {{ frontend_cache_path }}/search levels=1:2 keys_zone=search_cache:64m max_size=5g
             inactive=8h use_temp_path=off;

proxy_cache_path {{ frontend_cache_path }}/metadata levels=1:2 keys_zone=metadata_cache:128m max_size=10g
             inactive=1y use_temp_path=off;

proxy_cache_path {{ frontend_cache_path }}/nsfw levels=1:2 keys_zone=nsfw_cache:32m max_size=1g
             inactive=1y use_temp_path=off;

proxy_cache_path {{ frontend_cache_path }}/thumbnail levels=1:2 keys_zone=thumbnail_cache:64m max_size=1g
             inactive=1y use_temp_path=off;

# Allow hole-punching in proxy with `?nocache=true`.
proxy_cache_bypass $cookie_nocache $arg_nocache;

# TODO: Whitelist for load testing.
# https://gadelkareem.com/2012/03/25/limit-requests-per-ip-on-nginx-using-httplimitzonemodule-and-httplimitreqmodule-except-whitelist/
limit_req_zone $binary_remote_addr zone=search_reqs:10m rate=200r/s;
limit_conn_zone $binary_remote_addr zone=search_conns:10m;

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name {{ api_server_name }};

    location /server_status {
        # Enable Nginx stats
        stub_status on;
        # Only allow access from localhost
        allow 127.0.0.1;
        # Other request should be denied
        deny all;
    }

    location / {
        return 301 https://{{ api_server_name }}$request_uri;
    }
}

upstream search {
    ip_hash;
    keepalive {{ groups['search_api'] | length * 2 }}; # 2 connections per backend server.

    {% for host in groups['search_api'] %}
        server {{ hostvars[host]['vlan_ip'] | ipaddr('address') }} max_fails=3 fail_timeout=10s;
    {% endfor %}
}

upstream metadata {
    keepalive {{ groups['search_api'] | length * 2 }};

    {% for host in groups['search_api'] %}
        server {{ hostvars[host]['vlan_ip'] | ipaddr('address') }} max_fails=3 fail_timeout=10s;
    {% endfor %}
}

upstream nsfw {
    keepalive {{ groups['search_api'] | length * 2 }};

    {% for host in groups['nsfw_server'] %}
        server {{ hostvars[host]['vlan_ip'] | ipaddr('address') }} max_fails=3 fail_timeout=10;
    {% endfor %}
}

upstream pinservice {
    keepalive {{ groups['search_api'] | length * 2 }};

    {% for host in groups['pinservice'] %}
        server {{ hostvars[host]['vlan_ip'] | ipaddr('address') }} max_fails=3 fail_timeout=10;
    {% endfor %}
}

upstream nyats {
    keepalive {{ groups['search_api'] | length * 2 }};

    {% for host in groups['nyats'] %}
        server {{ hostvars[host]['vlan_ip'] | ipaddr('address') }} max_fails=0 fail_timeout=120s;
    {% endfor %}
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name {{ api_server_name }};

    # limit_req zone=search_reqs burst=300;
    # limit_conn search_conns 200; # Concurrent requests per client IP.

    location / {
        return 301 https://app.swaggerhub.com/apis-docs/ipfs-search/ipfs-search;
    }

    # Required for backend keepalive
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Pass on remote address
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_hide_header Access-Control-Allow-Origin;
    add_header Access-Control-Allow-Origin '*' always;

    location /v1/search {
        proxy_pass http://search/v1/search;

        proxy_cache search_cache;
        proxy_cache_use_stale updating;
        proxy_cache_lock on;
        proxy_cache_min_uses 1;
        proxy_cache_valid 200 8h;
        proxy_cache_valid any 0;

        proxy_read_timeout 10s;

        expires 15m;

        add_header X-Cache-Status $upstream_cache_status always;
    }

    location /v1/queue-pinservice {
        proxy_pass http://pinservice/v1/queue-pinservice;

        proxy_read_timeout 1s;
    }

    location /v1/metadata {
        proxy_pass http://metadata/v1/metadata;

        proxy_cache metadata_cache;
        proxy_cache_use_stale updating;
        proxy_cache_lock on;
        proxy_cache_min_uses 1;
        proxy_cache_valid 200 1y;
        proxy_cache_valid any 0;

        proxy_read_timeout 5s;

        expires 1y;

        add_header X-Cache-Status $upstream_cache_status always;
    }

    location /v1/nsfw {
        proxy_pass http://nsfw/v1/nsfw;

        proxy_cache nsfw_cache;
        proxy_cache_use_stale updating;
        proxy_cache_lock on;
        proxy_cache_min_uses 1;
        proxy_cache_valid 200 1y;
        proxy_cache_valid any 0;

        proxy_read_timeout 60s;

        expires 1y;

        add_header X-Cache-Status $upstream_cache_status always;
    }

    location /v1/thumbnail {
        proxy_pass http://nyats/v1/thumbnail;

        proxy_cache thumbnail_cache;
        proxy_cache_use_stale updating;
        proxy_cache_lock on;
        proxy_cache_min_uses 1;
        proxy_cache_valid 301 1y;
        proxy_cache_valid any 0;

        proxy_read_timeout 60s;

        expires 1y;

        add_header X-Cache-Status $upstream_cache_status always;
    }

    include {{ options_ssl_nginx }};

    ssl_certificate /etc/letsencrypt/live/{{ certbot_name }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ certbot_name }}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ certbot_name }}/chain.pem;
}

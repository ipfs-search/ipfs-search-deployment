---
- name: Create destination folder {{ node_server_install_path }}
  file:
    path: "{{ node_server_install_path }}"
    state: directory
    owner: "{{ lookup('env', 'USER') }}"
    mode: 0755
- name: Install
  become: false
  block:
  - name: Clone repository {{ node_server_repo }}
    git:
      dest: "{{ node_server_install_path }}"
      repo: "{{ node_server_repo }}"
      version: "{{ node_server_version }}"
    register: source
  - name: Install and build # noqa no-handler
    when: source.changed
    block:
    - name: Install dependencies
      npm:
        production: "{{ not node_server_build }}"
        ci: true
        path: "{{ node_server_working_directory }}"
      notify: "Restart {{ node_server_name }}"
    - name: Run build script
      command: npm run build
      args:
        chdir: "{{ node_server_working_directory }}"
      when: node_server_build
      changed_when: true
      notify: "Restart {{ node_server_name }}"
    # - name: Annotate
    #   include_role:
    #     name: annotate
    #   vars:
    #     role: api
    #     version: "{{ source.after }}"
    #     action: upgrade
- name: Create group {{ node_server_group }}
  group:
    name: "{{ node_server_group }}"
    system: true
    state: present
- name: Create user {{ node_server_user }}
  user:
    name: "{{ node_server_user }}"
    comment: nsfw-server
    group: "{{ node_server_group }}"
    system: true
    state: present
    shell: /usr/sbin/nologin
    # https://github.com/npm/cli/issues/4769
    # home: /nonexistent
    # create_home: no
- name: Install service {{ node_server_service_name }}
  template:
    src: "node_server.service.j2"
    dest: "/etc/systemd/system/{{ node_server_service_name }}.service"
    mode: 0644
  notify: "Restart {{ node_server_name }}"
- name: Enable service {{ node_server_service_name }}
  systemd:
    name: "{{ node_server_service_name }}"
    daemon_reload: true
    enabled: true
    state: started
- name: Enable nginx location {{ node_server_proxy_location_name }} # noqa role-name[path]
  include_role:
    name: services/location_proxy
    tasks_from: 'install_location.yml'
  vars:
    location_template: nginx-location.conf.j2
    location_name: "{{ node_server_proxy_location_name }}"
- name: Call handlers
  meta: flush_handlers
- name: Get service facts
  service_facts:
- name: Check whether service is running {{ node_server_service_name }}
  fail:
    msg: "Service {{ node_server_service_name }} not defined or running"
  when:
    ansible_facts.services[node_server_service_name + '.service'] is not defined or
    ansible_facts.services[node_server_service_name + '.service'].state != "running"
- name: "Wait for availability at port {{ node_server_host }}:{{ node_server_port }}" # noqa name[template]
  wait_for:
    host: "{{ node_server_host }}"
    port: "{{ node_server_port }}"
    timeout: 30
- name: Ensure unavailability at public IP at port {{ node_server_port }}
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ node_server_port }}"
    state: stopped
    timeout: 5
    msg: "Service {{ node_server_service_name }} was available on public IP."

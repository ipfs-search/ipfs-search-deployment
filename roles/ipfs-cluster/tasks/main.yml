---
- name: download ipfs-cluster-ctl
  get_url:
    url: "{{ ipfs_cluster_ctl_binary_url }}"
    checksum: "sha512:{{ ipfs_cluster_ctl_binary_sha512 }}"
    dest: /tmp/ipfs-cluster-ctl.tar.gz
  register: ipfs_cluster_ctl_download
- block:
    - name: extract ipfs-cluster-ctl
      unarchive:
        copy: no
        src: "{{ ipfs_cluster_ctl_download.dest }}"
        dest: /tmp/
    - name: install ipfs-cluster-ctl
      copy:
        remote_src: True
        src: /tmp/ipfs-cluster-ctl/ipfs-cluster-ctl
        dest: "{{ ipfs_cluster_ctl_binary }}"
        mode: 755
    - name: remove ipfs-cluster-ctl temporary files
      file: state=absent path=/tmp/ipfs-cluster-ctl
  when: ipfs_cluster_ctl_download.changed
- name: download ipfs-cluster-service
  get_url:
    url: "{{ ipfs_cluster_service_binary_url }}"
    checksum: "sha512:{{ ipfs_cluster_service_binary_sha512 }}"
    dest: /tmp/ipfs-cluster-service.tar.gz
  register: ipfs_cluster_service_download
- block:
    - name: extract ipfs-cluster-service
      unarchive:
        copy: no
        src: "{{ ipfs_cluster_service_download.dest }}"
        dest: /tmp/
    - name: install ipfs-cluster-service
      copy:
        remote_src: True
        src: /tmp/ipfs-cluster-service/ipfs-cluster-service
        dest: "{{ ipfs_cluster_service_binary }}"
        mode: 0755
      notify: restart ipfs-cluster
    - name: remove ipfs-cluster-service temporary files
      file: state=absent path=/tmp/ipfs-cluster-service
  when: ipfs_cluster_service_download.changed
- group: name="{{ ipfs_cluster_group }}" system=true state=present
- user:
    name: "{{ ipfs_cluster_user }}"
    comment: "ipfs-cluster-service"
    group: "{{ ipfs_cluster_group }}"
    system: true
    state: present
    home: "{{ ipfs_cluster_path }}"
    shell: /usr/sbin/nologin
- file:
    path: "{{ ipfs_cluster_path }}"
    owner: "{{ ipfs_cluster_user }}"
    group: "{{ ipfs_cluster_group }}"
    mode: 0750
    state: directory
- name: Loading secrets
  include_vars:
    file: ../../vault/secrets.yml
- name: Creating identity.json
  template:
    src: identity.json
    dest: "{{ ipfs_cluster_path }}/identity.json"
  notify: restart ipfs-cluster
# TODO: SECURITY: This requires that we trust ipify to provide the correct public IP. We could run our own ipify server.
- name: Get my public IP from ipify.org
  ipify_facts:
- name: Creating service.json
  template: src=service.json dest="{{ ipfs_cluster_path }}/service.json"
  notify: restart ipfs-cluster
- name: Configure ipfs-cluster service
  template: src=ipfs-cluster.service dest=/etc/systemd/system/ipfs-cluster.service
  notify: restart ipfs-cluster
- name: Enable ipfs-cluster service
  systemd: name=ipfs-cluster daemon_reload=yes state=started enabled=yes
- name: Creating service.json for followers
  template: src=service-followers.json dest="{{ ipfs_cluster_path }}/service-followers.json"
  register: service_followers
- name: Adding service-followers.json to cluster
  command: "ipfs-cluster-ctl add -n cluster-service -Q {{ ipfs_cluster_path }}/service-followers.json"
  environment:
    IPFS_CLUSTER_PATH: "{{ ipfs_cluster_path }}"
  become: true
  become_user: "{{ ipfs_cluster_user }}"
  when: service_followers.changed
